LINUX SCRIPTS -




logical based
5,7,13,14,15,16,18,19,20,23,24,25,26,27,31,32,33,34,36,40


#!/bin/bash

# ===== Q5: Swap Two Numbers Without Using Third Variable =====
echo "Enter first number:"
read a
echo "Enter second number:"
read b
a=$((a + b))
b=$((a - b))
a=$((a - b))
echo "After swapping: a=$a, b=$b"

# ===== Q7: Factorial of a Given Integer =====
echo "Enter a number:"
read num
fact=1
for (( i=1; i<=num; i++ ))
do
  fact=$((fact * i))
done
echo "Factorial of $num is $fact"

# ===== Q13: String Operations =====
echo "Enter a string:"
read str
len=${#str}
echo "Length of string: $len"
echo "Enter substring to find and replace:"
read find
echo "Enter replacement string:"
read replace
echo "Modified string: ${str//$find/$replace}"
echo "Enter second string to concatenate:"
read str2
echo "Concatenated string: $str$str2"
echo "Reversed string: $(echo $str | rev)"

# ===== Q14 & Q27: Palindrome Check =====
echo "Enter a string:"
read string
rev=$(echo "$string" | rev)
if [ "$string" = "$rev" ]; then
  echo "$string is a palindrome."
else
  echo "$string is not a palindrome."
fi

# ===== Q15: Temperature Conversion Menu =====
echo "1. Celsius to Fahrenheit"
echo "2. Fahrenheit to Celsius"
read -p "Enter choice: " choice
case $choice in
  1)
    read -p "Enter temp in Celsius: " c
    f=$(( (c * 9 / 5) + 32 ))
    echo "Temperature in Fahrenheit: $f";;
  2)
    read -p "Enter temp in Fahrenheit: " f
    c=$(( (f - 32) * 5 / 9 ))
    echo "Temperature in Celsius: $c";;
  *) echo "Invalid choice";;
esac

# ===== Q16: Square and Cube of Numbers from 1 to 10 =====
echo "Number  Square  Cube"
for ((i=1; i<=10; i++))
do
  echo "$i        $((i*i))      $((i*i*i))"
done

# ===== Q18: Menu Driven Calculator =====
echo "1. Addition"
echo "2. Subtraction"
echo "3. Multiplication"
echo "4. Division"
echo "5. Remainder"
read -p "Enter your choice: " ch
read -p "Enter two numbers: " a b
case $ch in
  1) echo "Sum: $((a + b))";;
  2) echo "Difference: $((a - b))";;
  3) echo "Product: $((a * b))";;
  4) echo "Quotient: $((a / b))";;
  5) echo "Remainder: $((a % b))";;
  *) echo "Invalid choice";;
esac

# ===== Q19: Maximum of Three Numbers =====
read -p "Enter three numbers: " a b c
if [ $a -ge $b ] && [ $a -ge $c ]; then
  echo "$a is the greatest"
elif [ $b -ge $a ] && [ $b -ge $c ]; then
  echo "$b is the greatest"
else
  echo "$c is the greatest"
fi

# ===== Q20: Fibonacci Series till User-Specified Limit =====
read -p "Enter limit: " n
a=0
b=1
echo "Fibonacci series:"
for (( i=0; i<n; i++ ))
do
  echo -n "$a "
  fn=$((a + b))
  a=$b
  b=$fn
done
echo

# ===== Q23: Factorial of All Numbers Using Loop =====
read -p "Enter a number: " n
for (( i=1; i<=n; i++ ))
do
  fact=1
  for (( j=1; j<=i; j++ ))
  do
    fact=$((fact * j))
  done
  echo "Factorial of $i is $fact"
done

# ===== Q24: Sum of Squares of N Numbers =====
read -p "Enter N: " n
sum=0
for (( i=1; i<=n; i++ ))
do
  sq=$((i*i))
  sum=$((sum + sq))
done
echo "Sum of squares of $n numbers is $sum"

# ===== Q25 & Q26: Character Classification using case and if-else =====
read -p "Enter a character: " ch
case $ch in
  [aeiouAEIOU]) echo "Vowel";;
  [a-zA-Z]) echo "Consonant";;
  [0-9]) echo "Digit";;
  *) echo "Special Character";;
esac

if [[ $ch =~ [aeiouAEIOU] ]]; then
  echo "Vowel"
elif [[ $ch =~ [a-zA-Z] ]]; then
  echo "Consonant"
elif [[ $ch =~ [0-9] ]]; then
  echo "Digit"
else
  echo "Special Character"
fi

# ===== Q31: Reverse a 5-digit Number Using While Loop =====
read -p "Enter a 5-digit number: " num
rev=0
temp=$num
while [ $temp -gt 0 ]
do
  digit=$((temp % 10))
  rev=$((rev * 10 + digit))
  temp=$((temp / 10))
done
echo "Reverse of $num is $rev"

# ===== Q32: Prime Numbers Between Given Range =====
read -p "Enter range: " n
for (( i=2; i<=n; i++ ))
do
  flag=1
  for (( j=2; j*j<=i; j++ ))
  do
    if (( i % j == 0 )); then
      flag=0
      break
    fi
  done
  if (( flag == 1 )); then
    echo "$i"
  fi
done

# ===== Q33: Sum of N Numbers Using Until Loop =====
read -p "Enter N: " n
sum=0
i=1
until [ $i -gt $n ]
do
  sum=$((sum + i))
  i=$((i + 1))
done
echo "Sum of first $n numbers is $sum"

# ===== Q34: 4x4 Matrix Input from User =====
declare -a matrix
echo "Enter elements for 4x4 matrix:"
for (( i=0; i<4; i++ ))
do
  for (( j=0; j<4; j++ ))
  do
    read -p "Element [$i,$j]: " matrix[$((i*4+j))]
  done
done
echo "Matrix is:"
for (( i=0; i<4; i++ ))
do
  for (( j=0; j<4; j++ ))
  do
    echo -n "${matrix[$((i*4+j))]} "
  done
  echo

done

# ===== Q36: Various String Operations =====
echo "Enter first string:"
read str1
echo "Enter second string:"
read str2
echo "Length of string 1: ${#str1}"
echo "Concatenated: $str1$str2"
echo "Reversed: $(echo $str1 | rev)"
echo "Enter substring to find and replace in string 1:"
read find
echo "Enter replacement:"
read replace
echo "Modified string: ${str1//$find/$replace}"
if [ "$str1" = "$str2" ]; then
  echo "Strings are equal"
else
  echo "Strings are different"
fi

# ===== Q40: Sum of Cubes of a 5-digit Number =====
read -p "Enter a 5-digit number: " num
sum=0
temp=$num
while [ $temp -gt 0 ]
do
  digit=$((temp % 10))
  sum=$((sum + digit * digit * digit))
  temp=$((temp / 10))
done
echo "Sum of cubes of digits of $num is $sum"







rest :

#!/bin/bash

# ===== Q5: Swap Two Numbers Without Using Third Variable =====
echo "Enter first number:"
read a
echo "Enter second number:"
read b
a=$((a + b))
b=$((a - b))
a=$((a - b))
echo "After swapping: a=$a, b=$b"

# ===== Q7: Factorial of a Given Integer =====
echo "Enter a number:"
read num
fact=1
for (( i=1; i<=num; i++ ))
do
  fact=$((fact * i))
done
echo "Factorial of $num is $fact"

# ===== Q13: String Operations =====
echo "Enter a string:"
read str
len=${#str}
echo "Length of string: $len"
echo "Enter substring to find and replace:"
read find
echo "Enter replacement string:"
read replace
echo "Modified string: ${str//$find/$replace}"
echo "Enter second string to concatenate:"
read str2
echo "Concatenated string: $str$str2"
echo "Reversed string: $(echo $str | rev)"

# ===== Q14 & Q27: Palindrome Check =====
echo "Enter a string:"
read string
rev=$(echo "$string" | rev)
if [ "$string" = "$rev" ]; then
  echo "$string is a palindrome."
else
  echo "$string is not a palindrome."
fi

# ===== Q15: Temperature Conversion Menu =====
echo "1. Celsius to Fahrenheit"
echo "2. Fahrenheit to Celsius"
read -p "Enter choice: " choice
case $choice in
  1)
    read -p "Enter temp in Celsius: " c
    f=$(( (c * 9 / 5) + 32 ))
    echo "Temperature in Fahrenheit: $f";;
  2)
    read -p "Enter temp in Fahrenheit: " f
    c=$(( (f - 32) * 5 / 9 ))
    echo "Temperature in Celsius: $c";;
  *) echo "Invalid choice";;
esac

# ===== Q16: Square and Cube of Numbers from 1 to 10 =====
echo "Number  Square  Cube"
for ((i=1; i<=10; i++))
do
  echo "$i        $((i*i))      $((i*i*i))"
done

# ===== Q18: Menu Driven Calculator =====
echo "1. Addition"
echo "2. Subtraction"
echo "3. Multiplication"
echo "4. Division"
echo "5. Remainder"
read -p "Enter your choice: " ch
read -p "Enter two numbers: " a b
case $ch in
  1) echo "Sum: $((a + b))";;
  2) echo "Difference: $((a - b))";;
  3) echo "Product: $((a * b))";;
  4) echo "Quotient: $((a / b))";;
  5) echo "Remainder: $((a % b))";;
  *) echo "Invalid choice";;
esac

# ===== Q19: Maximum of Three Numbers =====
read -p "Enter three numbers: " a b c
if [ $a -ge $b ] && [ $a -ge $c ]; then
  echo "$a is the greatest"
elif [ $b -ge $a ] && [ $b -ge $c ]; then
  echo "$b is the greatest"
else
  echo "$c is the greatest"
fi

# ===== Q20: Fibonacci Series till User-Specified Limit =====
read -p "Enter limit: " n
a=0
b=1
echo "Fibonacci series:"
for (( i=0; i<n; i++ ))
do
  echo -n "$a "
  fn=$((a + b))
  a=$b
  b=$fn
done
echo

# ===== Q23: Factorial of All Numbers Using Loop =====
read -p "Enter a number: " n
for (( i=1; i<=n; i++ ))
do
  fact=1
  for (( j=1; j<=i; j++ ))
  do
    fact=$((fact * j))
  done
  echo "Factorial of $i is $fact"
done

# ===== Q24: Sum of Squares of N Numbers =====
read -p "Enter N: " n
sum=0
for (( i=1; i<=n; i++ ))
do
  sq=$((i*i))
  sum=$((sum + sq))
done
echo "Sum of squares of $n numbers is $sum"

# ===== Q25 & Q26: Character Classification using case and if-else =====
read -p "Enter a character: " ch
case $ch in
  [aeiouAEIOU]) echo "Vowel";;
  [a-zA-Z]) echo "Consonant";;
  [0-9]) echo "Digit";;
  *) echo "Special Character";;
esac

if [[ $ch =~ [aeiouAEIOU] ]]; then
  echo "Vowel"
elif [[ $ch =~ [a-zA-Z] ]]; then
  echo "Consonant"
elif [[ $ch =~ [0-9] ]]; then
  echo "Digit"
else
  echo "Special Character"
fi

# ===== Q31: Reverse a 5-digit Number Using While Loop =====
read -p "Enter a 5-digit number: " num
rev=0
temp=$num
while [ $temp -gt 0 ]
do
  digit=$((temp % 10))
  rev=$((rev * 10 + digit))
  temp=$((temp / 10))
done
echo "Reverse of $num is $rev"

# ===== Q32: Prime Numbers Between Given Range =====
read -p "Enter range: " n
for (( i=2; i<=n; i++ ))
do
  flag=1
  for (( j=2; j*j<=i; j++ ))
  do
    if (( i % j == 0 )); then
      flag=0
      break
    fi
  done
  if (( flag == 1 )); then
    echo "$i"
  fi
done

# ===== Q33: Sum of N Numbers Using Until Loop =====
read -p "Enter N: " n
sum=0
i=1
until [ $i -gt $n ]
do
  sum=$((sum + i))
  i=$((i + 1))
done
echo "Sum of first $n numbers is $sum"

# ===== Q34: 4x4 Matrix Input from User =====
declare -a matrix
echo "Enter elements for 4x4 matrix:"
for (( i=0; i<4; i++ ))
do
  for (( j=0; j<4; j++ ))
  do
    read -p "Element [$i,$j]: " matrix[$((i*4+j))]
  done
done
echo "Matrix is:"
for (( i=0; i<4; i++ ))
do
  for (( j=0; j<4; j++ ))
  do
    echo -n "${matrix[$((i*4+j))]} "
  done
  echo
done

# ===== Q36: Various String Operations =====
echo "Enter first string:"
read str1
echo "Enter second string:"
read str2
echo "Length of string 1: ${#str1}"
echo "Concatenated: $str1$str2"
echo "Reversed: $(echo $str1 | rev)"
echo "Enter substring to find and replace in string 1:"
read find
echo "Enter replacement:"
read replace
echo "Modified string: ${str1//$find/$replace}"
if [ "$str1" = "$str2" ]; then
  echo "Strings are equal"
else
  echo "Strings are different"
fi

# ===== Q40: Sum of Cubes of a 5-digit Number =====
read -p "Enter a 5-digit number: " num
sum=0
temp=$num
while [ $temp -gt 0 ]
do
  digit=$((temp % 10))
  sum=$((sum + digit * digit * digit))
  temp=$((temp / 10))
done
echo "Sum of cubes of digits of $num is $sum"

# ===== Q6: Delete All Lines Containing a Word =====
echo "Enter the filename:"
read file
echo "Enter word to delete lines containing it:"
read word
grep -v "$word" "$file" > temp && mv temp "$file"
echo "Lines containing '$word' deleted from $file"

# ===== Q17: Display Info Using Environment Variables =====
echo "SHELL: $SHELL"
echo "USER: $USER"
echo "PWD: $PWD"
echo "PATH: $PATH"
echo "LANG: $LANG"
echo "HOME: $HOME"
echo "BASH_VERSION: $BASH_VERSION"
echo "BASH_VERSINFO: ${BASH_VERSINFO[*]}"
echo "HOSTNAME: $HOSTNAME"
echo "UID: $UID"

# ===== Q21: String Comparison =====
echo "Enter first string:"
read s1
echo "Enter second string:"
read s2

if [ -n "$s1" ]; then echo "First string is non-zero in length"; fi
if [ -z "$s1" ]; then echo "First string is zero-length"; fi
if [ "$s1" = "$s2" ]; then echo "Strings are equal"; fi
if [ "$s1" != "$s2" ]; then echo "Strings are not equal"; fi
if [ -n "$s1" ]; then echo "First string is not empty"; else echo "It is empty"; fi

# ===== Q22: File Type and Special Bits Check =====
echo "Enter file name:"
read f
[ -b "$f" ] && echo "Block special file"
[ -c "$f" ] && echo "Character special file"
[ -d "$f" ] && echo "Directory"
[ -f "$f" ] && echo "Ordinary file"
[ -g "$f" ] && echo "SGID bit is set"
[ -k "$f" ] && echo "Sticky bit is set"
[ -p "$f" ] && echo "Named pipe"
[ -t 0 ] && echo "File descriptor 0 (stdin) is associated with a terminal"

# ===== Q28: Command Line Arguments Demo =====
echo "Script name: $0"
echo "First arg: $1"
echo "Second arg: $2"
echo "All args: $@"
echo "Number of args: $#"
echo "All args (quoted): $*"
echo "Current process ID: $$"
echo "Last exit status: $?"
echo "Last background process ID: $!"

# ===== Q29: Demonstrate Sort Command Options =====
echo "Enter filename to sort:"
read fname
sort -b "$fname" > sort_b.txt
sort -r "$fname" > sort_r.txt
sort -n "$fname" > sort_n.txt
sort -M "$fname" > sort_M.txt
sort -u "$fname" > sort_u.txt
echo "Sorting done with options -b, -r, -n, -M, -u"

# ===== Q30: Use wc to Count Characters, Words, Lines =====
echo "Enter filename:"
read file
wc "$file"

# ===== Q35: wc Command Breakdown =====
wc -l "$file"
wc -w "$file"
wc -c "$file"
wc -m "$file"
wc -L "$file"

# ===== Q37: File Operations =====
echo "Enter source file:"
read src
echo "Enter destination file:"
read dest
cp "$src" "$dest"
echo "File copied."
rm -i "$src"
mv "$dest" "$src"
ls -l "$src"

# ===== Q38: System Info Display =====
ip a | grep inet
echo "Logged-in users: $(who | wc -l)"
uname -a
free -h
df -h
ifconfig
uname -m

# ===== Q39: File Property Checks =====
[ -p "$file" ] && echo "Named pipe"
[ -t 0 ] && echo "FD open on terminal"
[ -u "$file" ] && echo "SUID set"
[ -r "$file" ] && echo "Readable"
[ -w "$file" ] && echo "Writable"
[ -x "$file" ] && echo "Executable"
[ -s "$file" ] && echo "Size > 0"
[ -e "$file" ] && echo "File exists"
