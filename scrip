% Program to determine the class of an IP address

clc;

clear;

% Taking user input

first_octet = input('Enter the first octet (0-255): ');

% Validate the input

if first_octet < 0 || first_octet > 255

 disp('Invalid IP Address. First octet must be between 0 and 255.');

else

 % Determine the class

 if first_octet >= 0 && first_octet <= 127

 disp('Class A IP Address');

 elseif first_octet >= 128 && first_octet <= 191

 disp('Class B IP Address');

 elseif first_octet >= 192 && first_octet <= 223

 disp('Class C IP Address');

 elseif first_octet >= 224 && first_octet <= 239

 disp('Class D IP Address (Multicast)');

 elseif first_octet >= 240 && first_octet <= 255

 disp('Class E IP Address (Experimental)');

 end

end









#include <iostream>

#include <cstdlib> // For rand() and srand()

#include <ctime> // For time()

using namespace std;

int main() {

 int windowSize, totalFrames;

 int frames[50];

 cout << "Enter the window size: ";

 cin >> windowSize;

 cout << "Enter the number of frames to be sent: ";

 cin >> totalFrames;

 cout << "Enter the " << totalFrames << " frames: ";

 for (int i = 1; i <= totalFrames; i++) {

 cin >> frames[i];

 }

 srand(time(0)); // Randomize corruption

 int i = 1;

 while (i <= totalFrames) {

 bool errorDetected = false;

 cout << "\nSending frames: ";

 for (int j = 0; j < windowSize && (i + j) <= totalFrames; j++) {

 cout << frames[i + j] << " ";

 }

 cout << endl;

 for (int j = 0; j < windowSize && (i + j) <= totalFrames; j++) {

 bool isCorrupted = rand() % 10 < 3; // 30% chance of corruption

 if (isCorrupted) {

 cout << "Frame " << frames[i + j] << " is corrupted!" << endl;

 errorDetected = true;

 break; // Go-Back-N: If error, stop and resend window

 }

 else {

 cout << "Acknowledgment received for frame " << frames[i + j] << endl;

 }

 }

 if (errorDetected) {
cout << "Error detected! Resending window starting from frame " << frames[i] << 

endl;

 // No increment, resend the window

 }

 else {

 i += windowSize; // Move to next window

 }

 }

 cout << "\nAll frames sent successfully!" << endl;

 return 0;

}



