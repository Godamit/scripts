# Study of K-Means Algorithm
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

# Data points
x = [4, 5, 10, 4, 3, 11, 14, 6, 10, 12]
y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]

# Plotting the original points
plt.scatter(x, y)
plt.show()

# Preparing data for KMeans
data = list(zip(x, y))

# Applying KMeans with 3 clusters
kmeans = KMeans(n_clusters=3)
kmeans.fit(data)

# Plotting clustered points
plt.scatter(x, y, c=kmeans.labels_)
plt.show()




# Importing libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn import metrics
from sklearn.inspection import DecisionBoundaryDisplay

# Training data
X_train = np.array([
    [-1, -1],
    [-2, -1],
    [-3, -2],
    [1, 1],
    [2, 1],
    [3, 2]
])
y_train = [0, 0, 0, 1, 1, 1]  # Labels

# Initializing SVM Classifier
clf = svm.SVC(kernel='linear')

# Fitting the classifier
clf.fit(X_train, y_train)

# Predicting on training data
predictions = clf.predict(X_train)
print(predictions)

# Predicting a new value
new_prediction = clf.predict([[-4, -3]])
print(new_prediction)

# Getting support vectors
support_vectors = clf.support_vectors_
print(support_vectors)

# Classification report and confusion matrix
print(metrics.classification_report(y_train, predictions))
print(metrics.confusion_matrix(y_train, predictions))

# Plotting decision boundary
plt.scatter(X_train[:, 0], X_train[:, 1])
ax = plt.gca()
DecisionBoundaryDisplay.from_estimator(
    clf,
    X_train,
    plot_method="contour",
    colors="k",
    levels=[-1, 0, 1],
    alpha=0.5,
    linestyles=["--", "-", "--"]
)
ax.set_title("SVM Decision Boundary")
plt.show()







